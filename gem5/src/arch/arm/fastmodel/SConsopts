# Copyright 2019 Google, Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met: redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer;
# redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution;
# neither the name of the copyright holders nor the names of its
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

Import('*')

import os

default_simgen = os.path.join('${MAXCORE_HOME}', 'bin', 'simgen')

sticky_vars.AddVariables(
    BoolVariable('USE_ARM_FASTMODEL',
        'Build support for integrating ARM Fast Models', False),
    ('PVLIB_HOME', 'Fast Model portfolio directory',
     os.environ.get('PVLIB_HOME', '')),
    ('PVLIB_FLAVOR', 'What build flavor of the Fast Model pvlib to use',
     'Linux64_GCC-6.4'),
    ('MAXCORE_HOME', 'Fast Model tools directory',
     os.environ.get('MAXCORE_HOME', '')),
    ('ARMLMD_LICENSE_FILE', 'ARM license file location',
     os.environ.get('ARMLMD_LICENSE_FILE', '')),
    ('ARMLMD_LICENSE_COUNT',
     'The maximum number of ARM licenses to use concurrently', 1),
    ('SIMGEN', 'simgen executable', os.environ.get('SIMGEN', default_simgen)),
)

export_vars.extend([
        'ARMLMD_LICENSE_FILE',
        'PVLIB_HOME',
        'PVLIB_FLAVOR',
])
